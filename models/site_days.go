// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SiteDay is an object representing the database table.
type SiteDay struct {
	SiteDayID string    `boil:"site_day_id" json:"site_day_id" toml:"site_day_id" yaml:"site_day_id"`
	SiteID    string    `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	Day       Weekday   `boil:"day" json:"day" toml:"day" yaml:"day"`
	StartTime time.Time `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime   time.Time `boil:"end_time" json:"end_time" toml:"end_time" yaml:"end_time"`

	R *siteDayR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L siteDayL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SiteDayColumns = struct {
	SiteDayID string
	SiteID    string
	Day       string
	StartTime string
	EndTime   string
}{
	SiteDayID: "site_day_id",
	SiteID:    "site_id",
	Day:       "day",
	StartTime: "start_time",
	EndTime:   "end_time",
}

var SiteDayTableColumns = struct {
	SiteDayID string
	SiteID    string
	Day       string
	StartTime string
	EndTime   string
}{
	SiteDayID: "site_days.site_day_id",
	SiteID:    "site_days.site_id",
	Day:       "site_days.day",
	StartTime: "site_days.start_time",
	EndTime:   "site_days.end_time",
}

// Generated where

type whereHelperWeekday struct{ field string }

func (w whereHelperWeekday) EQ(x Weekday) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperWeekday) NEQ(x Weekday) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperWeekday) LT(x Weekday) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperWeekday) LTE(x Weekday) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperWeekday) GT(x Weekday) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperWeekday) GTE(x Weekday) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperWeekday) IN(slice []Weekday) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperWeekday) NIN(slice []Weekday) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SiteDayWhere = struct {
	SiteDayID whereHelperstring
	SiteID    whereHelperstring
	Day       whereHelperWeekday
	StartTime whereHelpertime_Time
	EndTime   whereHelpertime_Time
}{
	SiteDayID: whereHelperstring{field: "\"site_days\".\"site_day_id\""},
	SiteID:    whereHelperstring{field: "\"site_days\".\"site_id\""},
	Day:       whereHelperWeekday{field: "\"site_days\".\"day\""},
	StartTime: whereHelpertime_Time{field: "\"site_days\".\"start_time\""},
	EndTime:   whereHelpertime_Time{field: "\"site_days\".\"end_time\""},
}

// SiteDayRels is where relationship names are stored.
var SiteDayRels = struct {
	Site string
}{
	Site: "Site",
}

// siteDayR is where relationships are stored.
type siteDayR struct {
	Site *Site `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
}

// NewStruct creates a new relationship struct
func (*siteDayR) NewStruct() *siteDayR {
	return &siteDayR{}
}

func (r *siteDayR) GetSite() *Site {
	if r == nil {
		return nil
	}
	return r.Site
}

// siteDayL is where Load methods for each relationship are stored.
type siteDayL struct{}

var (
	siteDayAllColumns            = []string{"site_day_id", "site_id", "day", "start_time", "end_time"}
	siteDayColumnsWithoutDefault = []string{"site_id", "day", "start_time", "end_time"}
	siteDayColumnsWithDefault    = []string{"site_day_id"}
	siteDayPrimaryKeyColumns     = []string{"site_day_id"}
	siteDayGeneratedColumns      = []string{}
)

type (
	// SiteDaySlice is an alias for a slice of pointers to SiteDay.
	// This should almost always be used instead of []SiteDay.
	SiteDaySlice []*SiteDay
	// SiteDayHook is the signature for custom SiteDay hook methods
	SiteDayHook func(context.Context, boil.ContextExecutor, *SiteDay) error

	siteDayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	siteDayType                 = reflect.TypeOf(&SiteDay{})
	siteDayMapping              = queries.MakeStructMapping(siteDayType)
	siteDayPrimaryKeyMapping, _ = queries.BindMapping(siteDayType, siteDayMapping, siteDayPrimaryKeyColumns)
	siteDayInsertCacheMut       sync.RWMutex
	siteDayInsertCache          = make(map[string]insertCache)
	siteDayUpdateCacheMut       sync.RWMutex
	siteDayUpdateCache          = make(map[string]updateCache)
	siteDayUpsertCacheMut       sync.RWMutex
	siteDayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var siteDayAfterSelectMu sync.Mutex
var siteDayAfterSelectHooks []SiteDayHook

var siteDayBeforeInsertMu sync.Mutex
var siteDayBeforeInsertHooks []SiteDayHook
var siteDayAfterInsertMu sync.Mutex
var siteDayAfterInsertHooks []SiteDayHook

var siteDayBeforeUpdateMu sync.Mutex
var siteDayBeforeUpdateHooks []SiteDayHook
var siteDayAfterUpdateMu sync.Mutex
var siteDayAfterUpdateHooks []SiteDayHook

var siteDayBeforeDeleteMu sync.Mutex
var siteDayBeforeDeleteHooks []SiteDayHook
var siteDayAfterDeleteMu sync.Mutex
var siteDayAfterDeleteHooks []SiteDayHook

var siteDayBeforeUpsertMu sync.Mutex
var siteDayBeforeUpsertHooks []SiteDayHook
var siteDayAfterUpsertMu sync.Mutex
var siteDayAfterUpsertHooks []SiteDayHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SiteDay) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SiteDay) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SiteDay) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SiteDay) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SiteDay) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SiteDay) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SiteDay) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SiteDay) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SiteDay) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteDayAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSiteDayHook registers your hook function for all future operations.
func AddSiteDayHook(hookPoint boil.HookPoint, siteDayHook SiteDayHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		siteDayAfterSelectMu.Lock()
		siteDayAfterSelectHooks = append(siteDayAfterSelectHooks, siteDayHook)
		siteDayAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		siteDayBeforeInsertMu.Lock()
		siteDayBeforeInsertHooks = append(siteDayBeforeInsertHooks, siteDayHook)
		siteDayBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		siteDayAfterInsertMu.Lock()
		siteDayAfterInsertHooks = append(siteDayAfterInsertHooks, siteDayHook)
		siteDayAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		siteDayBeforeUpdateMu.Lock()
		siteDayBeforeUpdateHooks = append(siteDayBeforeUpdateHooks, siteDayHook)
		siteDayBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		siteDayAfterUpdateMu.Lock()
		siteDayAfterUpdateHooks = append(siteDayAfterUpdateHooks, siteDayHook)
		siteDayAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		siteDayBeforeDeleteMu.Lock()
		siteDayBeforeDeleteHooks = append(siteDayBeforeDeleteHooks, siteDayHook)
		siteDayBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		siteDayAfterDeleteMu.Lock()
		siteDayAfterDeleteHooks = append(siteDayAfterDeleteHooks, siteDayHook)
		siteDayAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		siteDayBeforeUpsertMu.Lock()
		siteDayBeforeUpsertHooks = append(siteDayBeforeUpsertHooks, siteDayHook)
		siteDayBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		siteDayAfterUpsertMu.Lock()
		siteDayAfterUpsertHooks = append(siteDayAfterUpsertHooks, siteDayHook)
		siteDayAfterUpsertMu.Unlock()
	}
}

// One returns a single siteDay record from the query.
func (q siteDayQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SiteDay, error) {
	o := &SiteDay{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for site_days")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SiteDay records from the query.
func (q siteDayQuery) All(ctx context.Context, exec boil.ContextExecutor) (SiteDaySlice, error) {
	var o []*SiteDay

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SiteDay slice")
	}

	if len(siteDayAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SiteDay records in the query.
func (q siteDayQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count site_days rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q siteDayQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if site_days exists")
	}

	return count > 0, nil
}

// Site pointed to by the foreign key.
func (o *SiteDay) Site(mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"site_id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return Sites(queryMods...)
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteDayL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteDay interface{}, mods queries.Applicator) error {
	var slice []*SiteDay
	var object *SiteDay

	if singular {
		var ok bool
		object, ok = maybeSiteDay.(*SiteDay)
		if !ok {
			object = new(SiteDay)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSiteDay)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSiteDay))
			}
		}
	} else {
		s, ok := maybeSiteDay.(*[]*SiteDay)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSiteDay)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSiteDay))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteDayR{}
		}
		args[object.SiteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteDayR{}
			}

			args[obj.SiteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sites`),
		qm.WhereIn(`sites.site_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sites")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &siteR{}
		}
		foreign.R.SiteDays = append(foreign.R.SiteDays, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.SiteID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.SiteDays = append(foreign.R.SiteDays, local)
				break
			}
		}
	}

	return nil
}

// SetSite of the siteDay to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SiteDays.
func (o *SiteDay) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_days\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 2, siteDayPrimaryKeyColumns),
	)
	values := []interface{}{related.SiteID, o.SiteDayID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.SiteID
	if o.R == nil {
		o.R = &siteDayR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			SiteDays: SiteDaySlice{o},
		}
	} else {
		related.R.SiteDays = append(related.R.SiteDays, o)
	}

	return nil
}

// SiteDays retrieves all the records using an executor.
func SiteDays(mods ...qm.QueryMod) siteDayQuery {
	mods = append(mods, qm.From("\"site_days\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"site_days\".*"})
	}

	return siteDayQuery{q}
}

// FindSiteDay retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSiteDay(ctx context.Context, exec boil.ContextExecutor, siteDayID string, selectCols ...string) (*SiteDay, error) {
	siteDayObj := &SiteDay{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"site_days\" where \"site_day_id\"=$1", sel,
	)

	q := queries.Raw(query, siteDayID)

	err := q.Bind(ctx, exec, siteDayObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from site_days")
	}

	if err = siteDayObj.doAfterSelectHooks(ctx, exec); err != nil {
		return siteDayObj, err
	}

	return siteDayObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SiteDay) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_days provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteDayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	siteDayInsertCacheMut.RLock()
	cache, cached := siteDayInsertCache[key]
	siteDayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			siteDayAllColumns,
			siteDayColumnsWithDefault,
			siteDayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(siteDayType, siteDayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(siteDayType, siteDayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"site_days\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"site_days\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into site_days")
	}

	if !cached {
		siteDayInsertCacheMut.Lock()
		siteDayInsertCache[key] = cache
		siteDayInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SiteDay.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SiteDay) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	siteDayUpdateCacheMut.RLock()
	cache, cached := siteDayUpdateCache[key]
	siteDayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			siteDayAllColumns,
			siteDayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update site_days, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"site_days\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, siteDayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(siteDayType, siteDayMapping, append(wl, siteDayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update site_days row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for site_days")
	}

	if !cached {
		siteDayUpdateCacheMut.Lock()
		siteDayUpdateCache[key] = cache
		siteDayUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q siteDayQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for site_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for site_days")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SiteDaySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"site_days\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, siteDayPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in siteDay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all siteDay")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SiteDay) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no site_days provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteDayColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	siteDayUpsertCacheMut.RLock()
	cache, cached := siteDayUpsertCache[key]
	siteDayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			siteDayAllColumns,
			siteDayColumnsWithDefault,
			siteDayColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			siteDayAllColumns,
			siteDayPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert site_days, could not build update column list")
		}

		ret := strmangle.SetComplement(siteDayAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(siteDayPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert site_days, could not build conflict column list")
			}

			conflict = make([]string, len(siteDayPrimaryKeyColumns))
			copy(conflict, siteDayPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"site_days\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(siteDayType, siteDayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(siteDayType, siteDayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert site_days")
	}

	if !cached {
		siteDayUpsertCacheMut.Lock()
		siteDayUpsertCache[key] = cache
		siteDayUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SiteDay record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SiteDay) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SiteDay provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), siteDayPrimaryKeyMapping)
	sql := "DELETE FROM \"site_days\" WHERE \"site_day_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from site_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for site_days")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q siteDayQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no siteDayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from site_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_days")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SiteDaySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(siteDayBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"site_days\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteDayPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from siteDay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_days")
	}

	if len(siteDayAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SiteDay) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSiteDay(ctx, exec, o.SiteDayID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SiteDaySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SiteDaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"site_days\".* FROM \"site_days\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteDayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SiteDaySlice")
	}

	*o = slice

	return nil
}

// SiteDayExists checks if the SiteDay row exists.
func SiteDayExists(ctx context.Context, exec boil.ContextExecutor, siteDayID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"site_days\" where \"site_day_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, siteDayID)
	}
	row := exec.QueryRowContext(ctx, sql, siteDayID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if site_days exists")
	}

	return exists, nil
}

// Exists checks if the SiteDay row exists.
func (o *SiteDay) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SiteDayExists(ctx, exec, o.SiteDayID)
}
