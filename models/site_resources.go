// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SiteResource is an object representing the database table.
type SiteResource struct {
	SiteResourceID string           `boil:"site_resource_id" json:"site_resource_id" toml:"site_resource_id" yaml:"site_resource_id"`
	SiteID         string           `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	Name           string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	ResourceType   SiteResourceType `boil:"resource_type" json:"resource_type" toml:"resource_type" yaml:"resource_type"`
	CreatedAt      null.Time        `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt      null.Time        `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *siteResourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L siteResourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SiteResourceColumns = struct {
	SiteResourceID string
	SiteID         string
	Name           string
	ResourceType   string
	CreatedAt      string
	DeletedAt      string
}{
	SiteResourceID: "site_resource_id",
	SiteID:         "site_id",
	Name:           "name",
	ResourceType:   "resource_type",
	CreatedAt:      "created_at",
	DeletedAt:      "deleted_at",
}

var SiteResourceTableColumns = struct {
	SiteResourceID string
	SiteID         string
	Name           string
	ResourceType   string
	CreatedAt      string
	DeletedAt      string
}{
	SiteResourceID: "site_resources.site_resource_id",
	SiteID:         "site_resources.site_id",
	Name:           "site_resources.name",
	ResourceType:   "site_resources.resource_type",
	CreatedAt:      "site_resources.created_at",
	DeletedAt:      "site_resources.deleted_at",
}

// Generated where

type whereHelperSiteResourceType struct{ field string }

func (w whereHelperSiteResourceType) EQ(x SiteResourceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperSiteResourceType) NEQ(x SiteResourceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperSiteResourceType) LT(x SiteResourceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperSiteResourceType) LTE(x SiteResourceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperSiteResourceType) GT(x SiteResourceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperSiteResourceType) GTE(x SiteResourceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperSiteResourceType) IN(slice []SiteResourceType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperSiteResourceType) NIN(slice []SiteResourceType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SiteResourceWhere = struct {
	SiteResourceID whereHelperstring
	SiteID         whereHelperstring
	Name           whereHelperstring
	ResourceType   whereHelperSiteResourceType
	CreatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
}{
	SiteResourceID: whereHelperstring{field: "\"site_resources\".\"site_resource_id\""},
	SiteID:         whereHelperstring{field: "\"site_resources\".\"site_id\""},
	Name:           whereHelperstring{field: "\"site_resources\".\"name\""},
	ResourceType:   whereHelperSiteResourceType{field: "\"site_resources\".\"resource_type\""},
	CreatedAt:      whereHelpernull_Time{field: "\"site_resources\".\"created_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"site_resources\".\"deleted_at\""},
}

// SiteResourceRels is where relationship names are stored.
var SiteResourceRels = struct {
	Site     string
	Bookings string
}{
	Site:     "Site",
	Bookings: "Bookings",
}

// siteResourceR is where relationships are stored.
type siteResourceR struct {
	Site     *Site        `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
	Bookings BookingSlice `boil:"Bookings" json:"Bookings" toml:"Bookings" yaml:"Bookings"`
}

// NewStruct creates a new relationship struct
func (*siteResourceR) NewStruct() *siteResourceR {
	return &siteResourceR{}
}

func (r *siteResourceR) GetSite() *Site {
	if r == nil {
		return nil
	}
	return r.Site
}

func (r *siteResourceR) GetBookings() BookingSlice {
	if r == nil {
		return nil
	}
	return r.Bookings
}

// siteResourceL is where Load methods for each relationship are stored.
type siteResourceL struct{}

var (
	siteResourceAllColumns            = []string{"site_resource_id", "site_id", "name", "resource_type", "created_at", "deleted_at"}
	siteResourceColumnsWithoutDefault = []string{"site_id", "name", "resource_type"}
	siteResourceColumnsWithDefault    = []string{"site_resource_id", "created_at", "deleted_at"}
	siteResourcePrimaryKeyColumns     = []string{"site_resource_id"}
	siteResourceGeneratedColumns      = []string{}
)

type (
	// SiteResourceSlice is an alias for a slice of pointers to SiteResource.
	// This should almost always be used instead of []SiteResource.
	SiteResourceSlice []*SiteResource
	// SiteResourceHook is the signature for custom SiteResource hook methods
	SiteResourceHook func(context.Context, boil.ContextExecutor, *SiteResource) error

	siteResourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	siteResourceType                 = reflect.TypeOf(&SiteResource{})
	siteResourceMapping              = queries.MakeStructMapping(siteResourceType)
	siteResourcePrimaryKeyMapping, _ = queries.BindMapping(siteResourceType, siteResourceMapping, siteResourcePrimaryKeyColumns)
	siteResourceInsertCacheMut       sync.RWMutex
	siteResourceInsertCache          = make(map[string]insertCache)
	siteResourceUpdateCacheMut       sync.RWMutex
	siteResourceUpdateCache          = make(map[string]updateCache)
	siteResourceUpsertCacheMut       sync.RWMutex
	siteResourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var siteResourceAfterSelectMu sync.Mutex
var siteResourceAfterSelectHooks []SiteResourceHook

var siteResourceBeforeInsertMu sync.Mutex
var siteResourceBeforeInsertHooks []SiteResourceHook
var siteResourceAfterInsertMu sync.Mutex
var siteResourceAfterInsertHooks []SiteResourceHook

var siteResourceBeforeUpdateMu sync.Mutex
var siteResourceBeforeUpdateHooks []SiteResourceHook
var siteResourceAfterUpdateMu sync.Mutex
var siteResourceAfterUpdateHooks []SiteResourceHook

var siteResourceBeforeDeleteMu sync.Mutex
var siteResourceBeforeDeleteHooks []SiteResourceHook
var siteResourceAfterDeleteMu sync.Mutex
var siteResourceAfterDeleteHooks []SiteResourceHook

var siteResourceBeforeUpsertMu sync.Mutex
var siteResourceBeforeUpsertHooks []SiteResourceHook
var siteResourceAfterUpsertMu sync.Mutex
var siteResourceAfterUpsertHooks []SiteResourceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SiteResource) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SiteResource) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SiteResource) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SiteResource) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SiteResource) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SiteResource) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SiteResource) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SiteResource) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SiteResource) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteResourceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSiteResourceHook registers your hook function for all future operations.
func AddSiteResourceHook(hookPoint boil.HookPoint, siteResourceHook SiteResourceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		siteResourceAfterSelectMu.Lock()
		siteResourceAfterSelectHooks = append(siteResourceAfterSelectHooks, siteResourceHook)
		siteResourceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		siteResourceBeforeInsertMu.Lock()
		siteResourceBeforeInsertHooks = append(siteResourceBeforeInsertHooks, siteResourceHook)
		siteResourceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		siteResourceAfterInsertMu.Lock()
		siteResourceAfterInsertHooks = append(siteResourceAfterInsertHooks, siteResourceHook)
		siteResourceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		siteResourceBeforeUpdateMu.Lock()
		siteResourceBeforeUpdateHooks = append(siteResourceBeforeUpdateHooks, siteResourceHook)
		siteResourceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		siteResourceAfterUpdateMu.Lock()
		siteResourceAfterUpdateHooks = append(siteResourceAfterUpdateHooks, siteResourceHook)
		siteResourceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		siteResourceBeforeDeleteMu.Lock()
		siteResourceBeforeDeleteHooks = append(siteResourceBeforeDeleteHooks, siteResourceHook)
		siteResourceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		siteResourceAfterDeleteMu.Lock()
		siteResourceAfterDeleteHooks = append(siteResourceAfterDeleteHooks, siteResourceHook)
		siteResourceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		siteResourceBeforeUpsertMu.Lock()
		siteResourceBeforeUpsertHooks = append(siteResourceBeforeUpsertHooks, siteResourceHook)
		siteResourceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		siteResourceAfterUpsertMu.Lock()
		siteResourceAfterUpsertHooks = append(siteResourceAfterUpsertHooks, siteResourceHook)
		siteResourceAfterUpsertMu.Unlock()
	}
}

// One returns a single siteResource record from the query.
func (q siteResourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SiteResource, error) {
	o := &SiteResource{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for site_resources")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SiteResource records from the query.
func (q siteResourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SiteResourceSlice, error) {
	var o []*SiteResource

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SiteResource slice")
	}

	if len(siteResourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SiteResource records in the query.
func (q siteResourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count site_resources rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q siteResourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if site_resources exists")
	}

	return count > 0, nil
}

// Site pointed to by the foreign key.
func (o *SiteResource) Site(mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"site_id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return Sites(queryMods...)
}

// Bookings retrieves all the booking's Bookings with an executor.
func (o *SiteResource) Bookings(mods ...qm.QueryMod) bookingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"booking_resources\" on \"bookings\".\"booking_id\" = \"booking_resources\".\"booking_id\""),
		qm.Where("\"booking_resources\".\"site_resource_id\"=?", o.SiteResourceID),
	)

	return Bookings(queryMods...)
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteResourceL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteResource interface{}, mods queries.Applicator) error {
	var slice []*SiteResource
	var object *SiteResource

	if singular {
		var ok bool
		object, ok = maybeSiteResource.(*SiteResource)
		if !ok {
			object = new(SiteResource)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSiteResource)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSiteResource))
			}
		}
	} else {
		s, ok := maybeSiteResource.(*[]*SiteResource)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSiteResource)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSiteResource))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteResourceR{}
		}
		args[object.SiteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteResourceR{}
			}

			args[obj.SiteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sites`),
		qm.WhereIn(`sites.site_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sites")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &siteR{}
		}
		foreign.R.SiteResources = append(foreign.R.SiteResources, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.SiteID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.SiteResources = append(foreign.R.SiteResources, local)
				break
			}
		}
	}

	return nil
}

// LoadBookings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (siteResourceL) LoadBookings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteResource interface{}, mods queries.Applicator) error {
	var slice []*SiteResource
	var object *SiteResource

	if singular {
		var ok bool
		object, ok = maybeSiteResource.(*SiteResource)
		if !ok {
			object = new(SiteResource)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSiteResource)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSiteResource))
			}
		}
	} else {
		s, ok := maybeSiteResource.(*[]*SiteResource)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSiteResource)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSiteResource))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteResourceR{}
		}
		args[object.SiteResourceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteResourceR{}
			}
			args[obj.SiteResourceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"bookings\".\"booking_id\", \"bookings\".\"site_id\", \"bookings\".\"start_timestamp\", \"bookings\".\"end_timestamp\", \"bookings\".\"duration\", \"bookings\".\"created_at\", \"bookings\".\"deleted_at\", \"a\".\"site_resource_id\""),
		qm.From("\"bookings\""),
		qm.InnerJoin("\"booking_resources\" as \"a\" on \"bookings\".\"booking_id\" = \"a\".\"booking_id\""),
		qm.WhereIn("\"a\".\"site_resource_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookings")
	}

	var resultSlice []*Booking

	var localJoinCols []string
	for results.Next() {
		one := new(Booking)
		var localJoinCol string

		err = results.Scan(&one.BookingID, &one.SiteID, &one.StartTimestamp, &one.EndTimestamp, &one.Duration, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for bookings")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice bookings")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookings")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookingR{}
			}
			foreign.R.SiteResources = append(foreign.R.SiteResources, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.SiteResourceID == localJoinCol {
				local.R.Bookings = append(local.R.Bookings, foreign)
				if foreign.R == nil {
					foreign.R = &bookingR{}
				}
				foreign.R.SiteResources = append(foreign.R.SiteResources, local)
				break
			}
		}
	}

	return nil
}

// SetSite of the siteResource to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SiteResources.
func (o *SiteResource) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_resources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 2, siteResourcePrimaryKeyColumns),
	)
	values := []interface{}{related.SiteID, o.SiteResourceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.SiteID
	if o.R == nil {
		o.R = &siteResourceR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			SiteResources: SiteResourceSlice{o},
		}
	} else {
		related.R.SiteResources = append(related.R.SiteResources, o)
	}

	return nil
}

// AddBookings adds the given related objects to the existing relationships
// of the site_resource, optionally inserting them as new records.
// Appends related to o.R.Bookings.
// Sets related.R.SiteResources appropriately.
func (o *SiteResource) AddBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Booking) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"booking_resources\" (\"site_resource_id\", \"booking_id\") values ($1, $2)"
		values := []interface{}{o.SiteResourceID, rel.BookingID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &siteResourceR{
			Bookings: related,
		}
	} else {
		o.R.Bookings = append(o.R.Bookings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookingR{
				SiteResources: SiteResourceSlice{o},
			}
		} else {
			rel.R.SiteResources = append(rel.R.SiteResources, o)
		}
	}
	return nil
}

// SetBookings removes all previously related items of the
// site_resource replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SiteResources's Bookings accordingly.
// Replaces o.R.Bookings with related.
// Sets related.R.SiteResources's Bookings accordingly.
func (o *SiteResource) SetBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Booking) error {
	query := "delete from \"booking_resources\" where \"site_resource_id\" = $1"
	values := []interface{}{o.SiteResourceID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeBookingsFromSiteResourcesSlice(o, related)
	if o.R != nil {
		o.R.Bookings = nil
	}

	return o.AddBookings(ctx, exec, insert, related...)
}

// RemoveBookings relationships from objects passed in.
// Removes related items from R.Bookings (uses pointer comparison, removal does not keep order)
// Sets related.R.SiteResources.
func (o *SiteResource) RemoveBookings(ctx context.Context, exec boil.ContextExecutor, related ...*Booking) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"booking_resources\" where \"site_resource_id\" = $1 and \"booking_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.SiteResourceID}
	for _, rel := range related {
		values = append(values, rel.BookingID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeBookingsFromSiteResourcesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Bookings {
			if rel != ri {
				continue
			}

			ln := len(o.R.Bookings)
			if ln > 1 && i < ln-1 {
				o.R.Bookings[i] = o.R.Bookings[ln-1]
			}
			o.R.Bookings = o.R.Bookings[:ln-1]
			break
		}
	}

	return nil
}

func removeBookingsFromSiteResourcesSlice(o *SiteResource, related []*Booking) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.SiteResources {
			if o.SiteResourceID != ri.SiteResourceID {
				continue
			}

			ln := len(rel.R.SiteResources)
			if ln > 1 && i < ln-1 {
				rel.R.SiteResources[i] = rel.R.SiteResources[ln-1]
			}
			rel.R.SiteResources = rel.R.SiteResources[:ln-1]
			break
		}
	}
}

// SiteResources retrieves all the records using an executor.
func SiteResources(mods ...qm.QueryMod) siteResourceQuery {
	mods = append(mods, qm.From("\"site_resources\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"site_resources\".*"})
	}

	return siteResourceQuery{q}
}

// FindSiteResource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSiteResource(ctx context.Context, exec boil.ContextExecutor, siteResourceID string, selectCols ...string) (*SiteResource, error) {
	siteResourceObj := &SiteResource{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"site_resources\" where \"site_resource_id\"=$1", sel,
	)

	q := queries.Raw(query, siteResourceID)

	err := q.Bind(ctx, exec, siteResourceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from site_resources")
	}

	if err = siteResourceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return siteResourceObj, err
	}

	return siteResourceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SiteResource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_resources provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteResourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	siteResourceInsertCacheMut.RLock()
	cache, cached := siteResourceInsertCache[key]
	siteResourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			siteResourceAllColumns,
			siteResourceColumnsWithDefault,
			siteResourceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(siteResourceType, siteResourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(siteResourceType, siteResourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"site_resources\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"site_resources\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into site_resources")
	}

	if !cached {
		siteResourceInsertCacheMut.Lock()
		siteResourceInsertCache[key] = cache
		siteResourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SiteResource.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SiteResource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	siteResourceUpdateCacheMut.RLock()
	cache, cached := siteResourceUpdateCache[key]
	siteResourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			siteResourceAllColumns,
			siteResourcePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update site_resources, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"site_resources\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, siteResourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(siteResourceType, siteResourceMapping, append(wl, siteResourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update site_resources row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for site_resources")
	}

	if !cached {
		siteResourceUpdateCacheMut.Lock()
		siteResourceUpdateCache[key] = cache
		siteResourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q siteResourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for site_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for site_resources")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SiteResourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"site_resources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, siteResourcePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in siteResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all siteResource")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SiteResource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no site_resources provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteResourceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	siteResourceUpsertCacheMut.RLock()
	cache, cached := siteResourceUpsertCache[key]
	siteResourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			siteResourceAllColumns,
			siteResourceColumnsWithDefault,
			siteResourceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			siteResourceAllColumns,
			siteResourcePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert site_resources, could not build update column list")
		}

		ret := strmangle.SetComplement(siteResourceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(siteResourcePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert site_resources, could not build conflict column list")
			}

			conflict = make([]string, len(siteResourcePrimaryKeyColumns))
			copy(conflict, siteResourcePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"site_resources\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(siteResourceType, siteResourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(siteResourceType, siteResourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert site_resources")
	}

	if !cached {
		siteResourceUpsertCacheMut.Lock()
		siteResourceUpsertCache[key] = cache
		siteResourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SiteResource record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SiteResource) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SiteResource provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), siteResourcePrimaryKeyMapping)
	sql := "DELETE FROM \"site_resources\" WHERE \"site_resource_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from site_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for site_resources")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q siteResourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no siteResourceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from site_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_resources")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SiteResourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(siteResourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"site_resources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteResourcePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from siteResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_resources")
	}

	if len(siteResourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SiteResource) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSiteResource(ctx, exec, o.SiteResourceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SiteResourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SiteResourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"site_resources\".* FROM \"site_resources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteResourcePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SiteResourceSlice")
	}

	*o = slice

	return nil
}

// SiteResourceExists checks if the SiteResource row exists.
func SiteResourceExists(ctx context.Context, exec boil.ContextExecutor, siteResourceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"site_resources\" where \"site_resource_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, siteResourceID)
	}
	row := exec.QueryRowContext(ctx, sql, siteResourceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if site_resources exists")
	}

	return exists, nil
}

// Exists checks if the SiteResource row exists.
func (o *SiteResource) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SiteResourceExists(ctx, exec, o.SiteResourceID)
}
