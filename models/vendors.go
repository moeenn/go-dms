// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Vendor is an object representing the database table.
type Vendor struct {
	VendorID    string `boil:"vendor_id" json:"vendor_id" toml:"vendor_id" yaml:"vendor_id"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string `boil:"description" json:"description" toml:"description" yaml:"description"`
	Phone       string `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	Email       string `boil:"email" json:"email" toml:"email" yaml:"email"`

	R *vendorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorColumns = struct {
	VendorID    string
	Name        string
	Description string
	Phone       string
	Email       string
}{
	VendorID:    "vendor_id",
	Name:        "name",
	Description: "description",
	Phone:       "phone",
	Email:       "email",
}

var VendorTableColumns = struct {
	VendorID    string
	Name        string
	Description string
	Phone       string
	Email       string
}{
	VendorID:    "vendors.vendor_id",
	Name:        "vendors.name",
	Description: "vendors.description",
	Phone:       "vendors.phone",
	Email:       "vendors.email",
}

// Generated where

var VendorWhere = struct {
	VendorID    whereHelperstring
	Name        whereHelperstring
	Description whereHelperstring
	Phone       whereHelperstring
	Email       whereHelperstring
}{
	VendorID:    whereHelperstring{field: "\"vendors\".\"vendor_id\""},
	Name:        whereHelperstring{field: "\"vendors\".\"name\""},
	Description: whereHelperstring{field: "\"vendors\".\"description\""},
	Phone:       whereHelperstring{field: "\"vendors\".\"phone\""},
	Email:       whereHelperstring{field: "\"vendors\".\"email\""},
}

// VendorRels is where relationship names are stored.
var VendorRels = struct {
	Deliveries string
	Sites      string
}{
	Deliveries: "Deliveries",
	Sites:      "Sites",
}

// vendorR is where relationships are stored.
type vendorR struct {
	Deliveries DeliverySlice `boil:"Deliveries" json:"Deliveries" toml:"Deliveries" yaml:"Deliveries"`
	Sites      SiteSlice     `boil:"Sites" json:"Sites" toml:"Sites" yaml:"Sites"`
}

// NewStruct creates a new relationship struct
func (*vendorR) NewStruct() *vendorR {
	return &vendorR{}
}

func (r *vendorR) GetDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}
	return r.Deliveries
}

func (r *vendorR) GetSites() SiteSlice {
	if r == nil {
		return nil
	}
	return r.Sites
}

// vendorL is where Load methods for each relationship are stored.
type vendorL struct{}

var (
	vendorAllColumns            = []string{"vendor_id", "name", "description", "phone", "email"}
	vendorColumnsWithoutDefault = []string{"name", "description", "phone", "email"}
	vendorColumnsWithDefault    = []string{"vendor_id"}
	vendorPrimaryKeyColumns     = []string{"vendor_id"}
	vendorGeneratedColumns      = []string{}
)

type (
	// VendorSlice is an alias for a slice of pointers to Vendor.
	// This should almost always be used instead of []Vendor.
	VendorSlice []*Vendor
	// VendorHook is the signature for custom Vendor hook methods
	VendorHook func(context.Context, boil.ContextExecutor, *Vendor) error

	vendorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorType                 = reflect.TypeOf(&Vendor{})
	vendorMapping              = queries.MakeStructMapping(vendorType)
	vendorPrimaryKeyMapping, _ = queries.BindMapping(vendorType, vendorMapping, vendorPrimaryKeyColumns)
	vendorInsertCacheMut       sync.RWMutex
	vendorInsertCache          = make(map[string]insertCache)
	vendorUpdateCacheMut       sync.RWMutex
	vendorUpdateCache          = make(map[string]updateCache)
	vendorUpsertCacheMut       sync.RWMutex
	vendorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorAfterSelectMu sync.Mutex
var vendorAfterSelectHooks []VendorHook

var vendorBeforeInsertMu sync.Mutex
var vendorBeforeInsertHooks []VendorHook
var vendorAfterInsertMu sync.Mutex
var vendorAfterInsertHooks []VendorHook

var vendorBeforeUpdateMu sync.Mutex
var vendorBeforeUpdateHooks []VendorHook
var vendorAfterUpdateMu sync.Mutex
var vendorAfterUpdateHooks []VendorHook

var vendorBeforeDeleteMu sync.Mutex
var vendorBeforeDeleteHooks []VendorHook
var vendorAfterDeleteMu sync.Mutex
var vendorAfterDeleteHooks []VendorHook

var vendorBeforeUpsertMu sync.Mutex
var vendorBeforeUpsertHooks []VendorHook
var vendorAfterUpsertMu sync.Mutex
var vendorAfterUpsertHooks []VendorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Vendor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Vendor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Vendor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Vendor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Vendor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Vendor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Vendor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Vendor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Vendor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorHook registers your hook function for all future operations.
func AddVendorHook(hookPoint boil.HookPoint, vendorHook VendorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorAfterSelectMu.Lock()
		vendorAfterSelectHooks = append(vendorAfterSelectHooks, vendorHook)
		vendorAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vendorBeforeInsertMu.Lock()
		vendorBeforeInsertHooks = append(vendorBeforeInsertHooks, vendorHook)
		vendorBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vendorAfterInsertMu.Lock()
		vendorAfterInsertHooks = append(vendorAfterInsertHooks, vendorHook)
		vendorAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vendorBeforeUpdateMu.Lock()
		vendorBeforeUpdateHooks = append(vendorBeforeUpdateHooks, vendorHook)
		vendorBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vendorAfterUpdateMu.Lock()
		vendorAfterUpdateHooks = append(vendorAfterUpdateHooks, vendorHook)
		vendorAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vendorBeforeDeleteMu.Lock()
		vendorBeforeDeleteHooks = append(vendorBeforeDeleteHooks, vendorHook)
		vendorBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vendorAfterDeleteMu.Lock()
		vendorAfterDeleteHooks = append(vendorAfterDeleteHooks, vendorHook)
		vendorAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vendorBeforeUpsertMu.Lock()
		vendorBeforeUpsertHooks = append(vendorBeforeUpsertHooks, vendorHook)
		vendorBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vendorAfterUpsertMu.Lock()
		vendorAfterUpsertHooks = append(vendorAfterUpsertHooks, vendorHook)
		vendorAfterUpsertMu.Unlock()
	}
}

// One returns a single vendor record from the query.
func (q vendorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Vendor, error) {
	o := &Vendor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vendors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Vendor records from the query.
func (q vendorQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorSlice, error) {
	var o []*Vendor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Vendor slice")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Vendor records in the query.
func (q vendorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vendors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vendors exists")
	}

	return count > 0, nil
}

// Deliveries retrieves all the delivery's Deliveries with an executor.
func (o *Vendor) Deliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"delivery\".\"vendor_id\"=?", o.VendorID),
	)

	return Deliveries(queryMods...)
}

// Sites retrieves all the site's Sites with an executor.
func (o *Vendor) Sites(mods ...qm.QueryMod) siteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"site_vendors\" on \"sites\".\"site_id\" = \"site_vendors\".\"site_id\""),
		qm.Where("\"site_vendors\".\"vendor_id\"=?", o.VendorID),
	)

	return Sites(queryMods...)
}

// LoadDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorL) LoadDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.VendorID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}
			args[obj.VendorID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`delivery`),
		qm.WhereIn(`delivery.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.Vendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.VendorID == foreign.VendorID {
				local.R.Deliveries = append(local.R.Deliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// LoadSites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vendorL) LoadSites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVendor interface{}, mods queries.Applicator) error {
	var slice []*Vendor
	var object *Vendor

	if singular {
		var ok bool
		object, ok = maybeVendor.(*Vendor)
		if !ok {
			object = new(Vendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVendor))
			}
		}
	} else {
		s, ok := maybeVendor.(*[]*Vendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVendor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vendorR{}
		}
		args[object.VendorID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vendorR{}
			}
			args[obj.VendorID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"sites\".\"site_id\", \"sites\".\"name\", \"sites\".\"business_id\", \"sites\".\"location\", \"sites\".\"created_at\", \"sites\".\"deleted_at\", \"a\".\"vendor_id\""),
		qm.From("\"sites\""),
		qm.InnerJoin("\"site_vendors\" as \"a\" on \"sites\".\"site_id\" = \"a\".\"site_id\""),
		qm.WhereIn("\"a\".\"vendor_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sites")
	}

	var resultSlice []*Site

	var localJoinCols []string
	for results.Next() {
		one := new(Site)
		var localJoinCol string

		err = results.Scan(&one.SiteID, &one.Name, &one.BusinessID, &one.Location, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for sites")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice sites")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sites")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Sites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &siteR{}
			}
			foreign.R.Vendors = append(foreign.R.Vendors, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.VendorID == localJoinCol {
				local.R.Sites = append(local.R.Sites, foreign)
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.Vendors = append(foreign.R.Vendors, local)
				break
			}
		}
	}

	return nil
}

// AddDeliveries adds the given related objects to the existing relationships
// of the vendor, optionally inserting them as new records.
// Appends related to o.R.Deliveries.
// Sets related.R.Vendor appropriately.
func (o *Vendor) AddDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VendorID = o.VendorID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"delivery\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.VendorID, rel.DeliveryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VendorID = o.VendorID
		}
	}

	if o.R == nil {
		o.R = &vendorR{
			Deliveries: related,
		}
	} else {
		o.R.Deliveries = append(o.R.Deliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				Vendor: o,
			}
		} else {
			rel.R.Vendor = o
		}
	}
	return nil
}

// AddSites adds the given related objects to the existing relationships
// of the vendor, optionally inserting them as new records.
// Appends related to o.R.Sites.
// Sets related.R.Vendors appropriately.
func (o *Vendor) AddSites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Site) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"site_vendors\" (\"vendor_id\", \"site_id\") values ($1, $2)"
		values := []interface{}{o.VendorID, rel.SiteID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &vendorR{
			Sites: related,
		}
	} else {
		o.R.Sites = append(o.R.Sites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &siteR{
				Vendors: VendorSlice{o},
			}
		} else {
			rel.R.Vendors = append(rel.R.Vendors, o)
		}
	}
	return nil
}

// SetSites removes all previously related items of the
// vendor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Vendors's Sites accordingly.
// Replaces o.R.Sites with related.
// Sets related.R.Vendors's Sites accordingly.
func (o *Vendor) SetSites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Site) error {
	query := "delete from \"site_vendors\" where \"vendor_id\" = $1"
	values := []interface{}{o.VendorID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSitesFromVendorsSlice(o, related)
	if o.R != nil {
		o.R.Sites = nil
	}

	return o.AddSites(ctx, exec, insert, related...)
}

// RemoveSites relationships from objects passed in.
// Removes related items from R.Sites (uses pointer comparison, removal does not keep order)
// Sets related.R.Vendors.
func (o *Vendor) RemoveSites(ctx context.Context, exec boil.ContextExecutor, related ...*Site) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"site_vendors\" where \"vendor_id\" = $1 and \"site_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.VendorID}
	for _, rel := range related {
		values = append(values, rel.SiteID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSitesFromVendorsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Sites {
			if rel != ri {
				continue
			}

			ln := len(o.R.Sites)
			if ln > 1 && i < ln-1 {
				o.R.Sites[i] = o.R.Sites[ln-1]
			}
			o.R.Sites = o.R.Sites[:ln-1]
			break
		}
	}

	return nil
}

func removeSitesFromVendorsSlice(o *Vendor, related []*Site) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Vendors {
			if o.VendorID != ri.VendorID {
				continue
			}

			ln := len(rel.R.Vendors)
			if ln > 1 && i < ln-1 {
				rel.R.Vendors[i] = rel.R.Vendors[ln-1]
			}
			rel.R.Vendors = rel.R.Vendors[:ln-1]
			break
		}
	}
}

// Vendors retrieves all the records using an executor.
func Vendors(mods ...qm.QueryMod) vendorQuery {
	mods = append(mods, qm.From("\"vendors\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vendors\".*"})
	}

	return vendorQuery{q}
}

// FindVendor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendor(ctx context.Context, exec boil.ContextExecutor, vendorID string, selectCols ...string) (*Vendor, error) {
	vendorObj := &Vendor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vendors\" where \"vendor_id\"=$1", sel,
	)

	q := queries.Raw(query, vendorID)

	err := q.Bind(ctx, exec, vendorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vendors")
	}

	if err = vendorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorObj, err
	}

	return vendorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Vendor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vendors provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorInsertCacheMut.RLock()
	cache, cached := vendorInsertCache[key]
	vendorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorAllColumns,
			vendorColumnsWithDefault,
			vendorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorType, vendorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vendors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vendors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vendors")
	}

	if !cached {
		vendorInsertCacheMut.Lock()
		vendorInsertCache[key] = cache
		vendorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Vendor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Vendor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorUpdateCacheMut.RLock()
	cache, cached := vendorUpdateCache[key]
	vendorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorAllColumns,
			vendorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vendors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vendors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vendorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, append(wl, vendorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vendors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vendors")
	}

	if !cached {
		vendorUpdateCacheMut.Lock()
		vendorUpdateCache[key] = cache
		vendorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vendors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vendors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vendorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vendor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Vendor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no vendors provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorUpsertCacheMut.RLock()
	cache, cached := vendorUpsertCache[key]
	vendorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vendorAllColumns,
			vendorColumnsWithDefault,
			vendorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vendorAllColumns,
			vendorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vendors, could not build update column list")
		}

		ret := strmangle.SetComplement(vendorAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vendorPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert vendors, could not build conflict column list")
			}

			conflict = make([]string, len(vendorPrimaryKeyColumns))
			copy(conflict, vendorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vendors\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorType, vendorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vendors")
	}

	if !cached {
		vendorUpsertCacheMut.Lock()
		vendorUpsertCache[key] = cache
		vendorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Vendor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Vendor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Vendor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorPrimaryKeyMapping)
	sql := "DELETE FROM \"vendors\" WHERE \"vendor_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vendors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vendorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vendors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vendors")
	}

	if len(vendorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Vendor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendor(ctx, exec, o.VendorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vendors\".* FROM \"vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vendorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VendorSlice")
	}

	*o = slice

	return nil
}

// VendorExists checks if the Vendor row exists.
func VendorExists(ctx context.Context, exec boil.ContextExecutor, vendorID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vendors\" where \"vendor_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vendorID)
	}
	row := exec.QueryRowContext(ctx, sql, vendorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vendors exists")
	}

	return exists, nil
}

// Exists checks if the Vendor row exists.
func (o *Vendor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorExists(ctx, exec, o.VendorID)
}
