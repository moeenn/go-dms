// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types/pgeo"
	"github.com/volatiletech/strmangle"
)

// Site is an object representing the database table.
type Site struct {
	SiteID     string     `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	Name       string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	BusinessID string     `boil:"business_id" json:"business_id" toml:"business_id" yaml:"business_id"`
	Location   pgeo.Point `boil:"location" json:"location" toml:"location" yaml:"location"`
	CreatedAt  null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt  null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *siteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L siteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SiteColumns = struct {
	SiteID     string
	Name       string
	BusinessID string
	Location   string
	CreatedAt  string
	DeletedAt  string
}{
	SiteID:     "site_id",
	Name:       "name",
	BusinessID: "business_id",
	Location:   "location",
	CreatedAt:  "created_at",
	DeletedAt:  "deleted_at",
}

var SiteTableColumns = struct {
	SiteID     string
	Name       string
	BusinessID string
	Location   string
	CreatedAt  string
	DeletedAt  string
}{
	SiteID:     "sites.site_id",
	Name:       "sites.name",
	BusinessID: "sites.business_id",
	Location:   "sites.location",
	CreatedAt:  "sites.created_at",
	DeletedAt:  "sites.deleted_at",
}

// Generated where

type whereHelperpgeo_Point struct{ field string }

func (w whereHelperpgeo_Point) EQ(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Point) NEQ(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Point) LT(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Point) LTE(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Point) GT(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Point) GTE(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SiteWhere = struct {
	SiteID     whereHelperstring
	Name       whereHelperstring
	BusinessID whereHelperstring
	Location   whereHelperpgeo_Point
	CreatedAt  whereHelpernull_Time
	DeletedAt  whereHelpernull_Time
}{
	SiteID:     whereHelperstring{field: "\"sites\".\"site_id\""},
	Name:       whereHelperstring{field: "\"sites\".\"name\""},
	BusinessID: whereHelperstring{field: "\"sites\".\"business_id\""},
	Location:   whereHelperpgeo_Point{field: "\"sites\".\"location\""},
	CreatedAt:  whereHelpernull_Time{field: "\"sites\".\"created_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"sites\".\"deleted_at\""},
}

// SiteRels is where relationship names are stored.
var SiteRels = struct {
	Business           string
	Bookings           string
	SiteDays           string
	SiteResources      string
	SubcontractorUsers string
	Vendors            string
}{
	Business:           "Business",
	Bookings:           "Bookings",
	SiteDays:           "SiteDays",
	SiteResources:      "SiteResources",
	SubcontractorUsers: "SubcontractorUsers",
	Vendors:            "Vendors",
}

// siteR is where relationships are stored.
type siteR struct {
	Business           *User             `boil:"Business" json:"Business" toml:"Business" yaml:"Business"`
	Bookings           BookingSlice      `boil:"Bookings" json:"Bookings" toml:"Bookings" yaml:"Bookings"`
	SiteDays           SiteDaySlice      `boil:"SiteDays" json:"SiteDays" toml:"SiteDays" yaml:"SiteDays"`
	SiteResources      SiteResourceSlice `boil:"SiteResources" json:"SiteResources" toml:"SiteResources" yaml:"SiteResources"`
	SubcontractorUsers UserSlice         `boil:"SubcontractorUsers" json:"SubcontractorUsers" toml:"SubcontractorUsers" yaml:"SubcontractorUsers"`
	Vendors            VendorSlice       `boil:"Vendors" json:"Vendors" toml:"Vendors" yaml:"Vendors"`
}

// NewStruct creates a new relationship struct
func (*siteR) NewStruct() *siteR {
	return &siteR{}
}

func (r *siteR) GetBusiness() *User {
	if r == nil {
		return nil
	}
	return r.Business
}

func (r *siteR) GetBookings() BookingSlice {
	if r == nil {
		return nil
	}
	return r.Bookings
}

func (r *siteR) GetSiteDays() SiteDaySlice {
	if r == nil {
		return nil
	}
	return r.SiteDays
}

func (r *siteR) GetSiteResources() SiteResourceSlice {
	if r == nil {
		return nil
	}
	return r.SiteResources
}

func (r *siteR) GetSubcontractorUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.SubcontractorUsers
}

func (r *siteR) GetVendors() VendorSlice {
	if r == nil {
		return nil
	}
	return r.Vendors
}

// siteL is where Load methods for each relationship are stored.
type siteL struct{}

var (
	siteAllColumns            = []string{"site_id", "name", "business_id", "location", "created_at", "deleted_at"}
	siteColumnsWithoutDefault = []string{"name", "business_id", "location"}
	siteColumnsWithDefault    = []string{"site_id", "created_at", "deleted_at"}
	sitePrimaryKeyColumns     = []string{"site_id"}
	siteGeneratedColumns      = []string{}
)

type (
	// SiteSlice is an alias for a slice of pointers to Site.
	// This should almost always be used instead of []Site.
	SiteSlice []*Site
	// SiteHook is the signature for custom Site hook methods
	SiteHook func(context.Context, boil.ContextExecutor, *Site) error

	siteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	siteType                 = reflect.TypeOf(&Site{})
	siteMapping              = queries.MakeStructMapping(siteType)
	sitePrimaryKeyMapping, _ = queries.BindMapping(siteType, siteMapping, sitePrimaryKeyColumns)
	siteInsertCacheMut       sync.RWMutex
	siteInsertCache          = make(map[string]insertCache)
	siteUpdateCacheMut       sync.RWMutex
	siteUpdateCache          = make(map[string]updateCache)
	siteUpsertCacheMut       sync.RWMutex
	siteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var siteAfterSelectMu sync.Mutex
var siteAfterSelectHooks []SiteHook

var siteBeforeInsertMu sync.Mutex
var siteBeforeInsertHooks []SiteHook
var siteAfterInsertMu sync.Mutex
var siteAfterInsertHooks []SiteHook

var siteBeforeUpdateMu sync.Mutex
var siteBeforeUpdateHooks []SiteHook
var siteAfterUpdateMu sync.Mutex
var siteAfterUpdateHooks []SiteHook

var siteBeforeDeleteMu sync.Mutex
var siteBeforeDeleteHooks []SiteHook
var siteAfterDeleteMu sync.Mutex
var siteAfterDeleteHooks []SiteHook

var siteBeforeUpsertMu sync.Mutex
var siteBeforeUpsertHooks []SiteHook
var siteAfterUpsertMu sync.Mutex
var siteAfterUpsertHooks []SiteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Site) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Site) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Site) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Site) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Site) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Site) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Site) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Site) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Site) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSiteHook registers your hook function for all future operations.
func AddSiteHook(hookPoint boil.HookPoint, siteHook SiteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		siteAfterSelectMu.Lock()
		siteAfterSelectHooks = append(siteAfterSelectHooks, siteHook)
		siteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		siteBeforeInsertMu.Lock()
		siteBeforeInsertHooks = append(siteBeforeInsertHooks, siteHook)
		siteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		siteAfterInsertMu.Lock()
		siteAfterInsertHooks = append(siteAfterInsertHooks, siteHook)
		siteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		siteBeforeUpdateMu.Lock()
		siteBeforeUpdateHooks = append(siteBeforeUpdateHooks, siteHook)
		siteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		siteAfterUpdateMu.Lock()
		siteAfterUpdateHooks = append(siteAfterUpdateHooks, siteHook)
		siteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		siteBeforeDeleteMu.Lock()
		siteBeforeDeleteHooks = append(siteBeforeDeleteHooks, siteHook)
		siteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		siteAfterDeleteMu.Lock()
		siteAfterDeleteHooks = append(siteAfterDeleteHooks, siteHook)
		siteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		siteBeforeUpsertMu.Lock()
		siteBeforeUpsertHooks = append(siteBeforeUpsertHooks, siteHook)
		siteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		siteAfterUpsertMu.Lock()
		siteAfterUpsertHooks = append(siteAfterUpsertHooks, siteHook)
		siteAfterUpsertMu.Unlock()
	}
}

// One returns a single site record from the query.
func (q siteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Site, error) {
	o := &Site{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sites")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Site records from the query.
func (q siteQuery) All(ctx context.Context, exec boil.ContextExecutor) (SiteSlice, error) {
	var o []*Site

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Site slice")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Site records in the query.
func (q siteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sites rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q siteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sites exists")
	}

	return count > 0, nil
}

// Business pointed to by the foreign key.
func (o *Site) Business(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.BusinessID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Bookings retrieves all the booking's Bookings with an executor.
func (o *Site) Bookings(mods ...qm.QueryMod) bookingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bookings\".\"site_id\"=?", o.SiteID),
	)

	return Bookings(queryMods...)
}

// SiteDays retrieves all the site_day's SiteDays with an executor.
func (o *Site) SiteDays(mods ...qm.QueryMod) siteDayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"site_days\".\"site_id\"=?", o.SiteID),
	)

	return SiteDays(queryMods...)
}

// SiteResources retrieves all the site_resource's SiteResources with an executor.
func (o *Site) SiteResources(mods ...qm.QueryMod) siteResourceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"site_resources\".\"site_id\"=?", o.SiteID),
	)

	return SiteResources(queryMods...)
}

// SubcontractorUsers retrieves all the user's Users with an executor via user_id column.
func (o *Site) SubcontractorUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"site_subcontractors\" on \"users\".\"user_id\" = \"site_subcontractors\".\"subcontractor_id\""),
		qm.Where("\"site_subcontractors\".\"site_id\"=?", o.SiteID),
	)

	return Users(queryMods...)
}

// Vendors retrieves all the vendor's Vendors with an executor.
func (o *Site) Vendors(mods ...qm.QueryMod) vendorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"site_vendors\" on \"vendors\".\"vendor_id\" = \"site_vendors\".\"vendor_id\""),
		qm.Where("\"site_vendors\".\"site_id\"=?", o.SiteID),
	)

	return Vendors(queryMods...)
}

// LoadBusiness allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteL) LoadBusiness(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSite interface{}, mods queries.Applicator) error {
	var slice []*Site
	var object *Site

	if singular {
		var ok bool
		object, ok = maybeSite.(*Site)
		if !ok {
			object = new(Site)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSite))
			}
		}
	} else {
		s, ok := maybeSite.(*[]*Site)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteR{}
		}
		args[object.BusinessID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteR{}
			}

			args[obj.BusinessID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Business = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.BusinessSites = append(foreign.R.BusinessSites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessID == foreign.UserID {
				local.R.Business = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.BusinessSites = append(foreign.R.BusinessSites, local)
				break
			}
		}
	}

	return nil
}

// LoadBookings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (siteL) LoadBookings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSite interface{}, mods queries.Applicator) error {
	var slice []*Site
	var object *Site

	if singular {
		var ok bool
		object, ok = maybeSite.(*Site)
		if !ok {
			object = new(Site)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSite))
			}
		}
	} else {
		s, ok := maybeSite.(*[]*Site)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteR{}
		}
		args[object.SiteID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteR{}
			}
			args[obj.SiteID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`bookings`),
		qm.WhereIn(`bookings.site_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookings")
	}

	var resultSlice []*Booking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bookings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookings")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookingR{}
			}
			foreign.R.Site = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SiteID == foreign.SiteID {
				local.R.Bookings = append(local.R.Bookings, foreign)
				if foreign.R == nil {
					foreign.R = &bookingR{}
				}
				foreign.R.Site = local
				break
			}
		}
	}

	return nil
}

// LoadSiteDays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (siteL) LoadSiteDays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSite interface{}, mods queries.Applicator) error {
	var slice []*Site
	var object *Site

	if singular {
		var ok bool
		object, ok = maybeSite.(*Site)
		if !ok {
			object = new(Site)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSite))
			}
		}
	} else {
		s, ok := maybeSite.(*[]*Site)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteR{}
		}
		args[object.SiteID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteR{}
			}
			args[obj.SiteID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`site_days`),
		qm.WhereIn(`site_days.site_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load site_days")
	}

	var resultSlice []*SiteDay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice site_days")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on site_days")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site_days")
	}

	if len(siteDayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SiteDays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &siteDayR{}
			}
			foreign.R.Site = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SiteID == foreign.SiteID {
				local.R.SiteDays = append(local.R.SiteDays, foreign)
				if foreign.R == nil {
					foreign.R = &siteDayR{}
				}
				foreign.R.Site = local
				break
			}
		}
	}

	return nil
}

// LoadSiteResources allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (siteL) LoadSiteResources(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSite interface{}, mods queries.Applicator) error {
	var slice []*Site
	var object *Site

	if singular {
		var ok bool
		object, ok = maybeSite.(*Site)
		if !ok {
			object = new(Site)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSite))
			}
		}
	} else {
		s, ok := maybeSite.(*[]*Site)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteR{}
		}
		args[object.SiteID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteR{}
			}
			args[obj.SiteID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`site_resources`),
		qm.WhereIn(`site_resources.site_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load site_resources")
	}

	var resultSlice []*SiteResource
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice site_resources")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on site_resources")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site_resources")
	}

	if len(siteResourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SiteResources = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &siteResourceR{}
			}
			foreign.R.Site = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SiteID == foreign.SiteID {
				local.R.SiteResources = append(local.R.SiteResources, foreign)
				if foreign.R == nil {
					foreign.R = &siteResourceR{}
				}
				foreign.R.Site = local
				break
			}
		}
	}

	return nil
}

// LoadSubcontractorUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (siteL) LoadSubcontractorUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSite interface{}, mods queries.Applicator) error {
	var slice []*Site
	var object *Site

	if singular {
		var ok bool
		object, ok = maybeSite.(*Site)
		if !ok {
			object = new(Site)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSite))
			}
		}
	} else {
		s, ok := maybeSite.(*[]*Site)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteR{}
		}
		args[object.SiteID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteR{}
			}
			args[obj.SiteID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"users\".\"user_id\", \"users\".\"email\", \"users\".\"name\", \"users\".\"password\", \"users\".\"role\", \"users\".\"created_at\", \"users\".\"deleted_at\", \"a\".\"site_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"site_subcontractors\" as \"a\" on \"users\".\"user_id\" = \"a\".\"subcontractor_id\""),
		qm.WhereIn("\"a\".\"site_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.UserID, &one.Email, &one.Name, &one.Password, &one.Role, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SubcontractorUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Sites = append(foreign.R.Sites, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.SiteID == localJoinCol {
				local.R.SubcontractorUsers = append(local.R.SubcontractorUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Sites = append(foreign.R.Sites, local)
				break
			}
		}
	}

	return nil
}

// LoadVendors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (siteL) LoadVendors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSite interface{}, mods queries.Applicator) error {
	var slice []*Site
	var object *Site

	if singular {
		var ok bool
		object, ok = maybeSite.(*Site)
		if !ok {
			object = new(Site)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSite))
			}
		}
	} else {
		s, ok := maybeSite.(*[]*Site)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteR{}
		}
		args[object.SiteID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteR{}
			}
			args[obj.SiteID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"vendors\".\"vendor_id\", \"vendors\".\"name\", \"vendors\".\"description\", \"vendors\".\"phone\", \"vendors\".\"email\", \"a\".\"site_id\""),
		qm.From("\"vendors\""),
		qm.InnerJoin("\"site_vendors\" as \"a\" on \"vendors\".\"vendor_id\" = \"a\".\"vendor_id\""),
		qm.WhereIn("\"a\".\"site_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vendors")
	}

	var resultSlice []*Vendor

	var localJoinCols []string
	for results.Next() {
		one := new(Vendor)
		var localJoinCol string

		err = results.Scan(&one.VendorID, &one.Name, &one.Description, &one.Phone, &one.Email, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for vendors")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice vendors")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Vendors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vendorR{}
			}
			foreign.R.Sites = append(foreign.R.Sites, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.SiteID == localJoinCol {
				local.R.Vendors = append(local.R.Vendors, foreign)
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.Sites = append(foreign.R.Sites, local)
				break
			}
		}
	}

	return nil
}

// SetBusiness of the site to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.BusinessSites.
func (o *Site) SetBusiness(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"business_id"}),
		strmangle.WhereClause("\"", "\"", 2, sitePrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.SiteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessID = related.UserID
	if o.R == nil {
		o.R = &siteR{
			Business: related,
		}
	} else {
		o.R.Business = related
	}

	if related.R == nil {
		related.R = &userR{
			BusinessSites: SiteSlice{o},
		}
	} else {
		related.R.BusinessSites = append(related.R.BusinessSites, o)
	}

	return nil
}

// AddBookings adds the given related objects to the existing relationships
// of the site, optionally inserting them as new records.
// Appends related to o.R.Bookings.
// Sets related.R.Site appropriately.
func (o *Site) AddBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Booking) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SiteID = o.SiteID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bookings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookingPrimaryKeyColumns),
			)
			values := []interface{}{o.SiteID, rel.BookingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SiteID = o.SiteID
		}
	}

	if o.R == nil {
		o.R = &siteR{
			Bookings: related,
		}
	} else {
		o.R.Bookings = append(o.R.Bookings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookingR{
				Site: o,
			}
		} else {
			rel.R.Site = o
		}
	}
	return nil
}

// AddSiteDays adds the given related objects to the existing relationships
// of the site, optionally inserting them as new records.
// Appends related to o.R.SiteDays.
// Sets related.R.Site appropriately.
func (o *Site) AddSiteDays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteDay) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SiteID = o.SiteID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"site_days\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
				strmangle.WhereClause("\"", "\"", 2, siteDayPrimaryKeyColumns),
			)
			values := []interface{}{o.SiteID, rel.SiteDayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SiteID = o.SiteID
		}
	}

	if o.R == nil {
		o.R = &siteR{
			SiteDays: related,
		}
	} else {
		o.R.SiteDays = append(o.R.SiteDays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &siteDayR{
				Site: o,
			}
		} else {
			rel.R.Site = o
		}
	}
	return nil
}

// AddSiteResources adds the given related objects to the existing relationships
// of the site, optionally inserting them as new records.
// Appends related to o.R.SiteResources.
// Sets related.R.Site appropriately.
func (o *Site) AddSiteResources(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteResource) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SiteID = o.SiteID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"site_resources\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
				strmangle.WhereClause("\"", "\"", 2, siteResourcePrimaryKeyColumns),
			)
			values := []interface{}{o.SiteID, rel.SiteResourceID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SiteID = o.SiteID
		}
	}

	if o.R == nil {
		o.R = &siteR{
			SiteResources: related,
		}
	} else {
		o.R.SiteResources = append(o.R.SiteResources, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &siteResourceR{
				Site: o,
			}
		} else {
			rel.R.Site = o
		}
	}
	return nil
}

// AddSubcontractorUsers adds the given related objects to the existing relationships
// of the site, optionally inserting them as new records.
// Appends related to o.R.SubcontractorUsers.
// Sets related.R.Sites appropriately.
func (o *Site) AddSubcontractorUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"site_subcontractors\" (\"site_id\", \"subcontractor_id\") values ($1, $2)"
		values := []interface{}{o.SiteID, rel.UserID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &siteR{
			SubcontractorUsers: related,
		}
	} else {
		o.R.SubcontractorUsers = append(o.R.SubcontractorUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Sites: SiteSlice{o},
			}
		} else {
			rel.R.Sites = append(rel.R.Sites, o)
		}
	}
	return nil
}

// SetSubcontractorUsers removes all previously related items of the
// site replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sites's SubcontractorUsers accordingly.
// Replaces o.R.SubcontractorUsers with related.
// Sets related.R.Sites's SubcontractorUsers accordingly.
func (o *Site) SetSubcontractorUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"site_subcontractors\" where \"site_id\" = $1"
	values := []interface{}{o.SiteID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSubcontractorUsersFromSitesSlice(o, related)
	if o.R != nil {
		o.R.SubcontractorUsers = nil
	}

	return o.AddSubcontractorUsers(ctx, exec, insert, related...)
}

// RemoveSubcontractorUsers relationships from objects passed in.
// Removes related items from R.SubcontractorUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.Sites.
func (o *Site) RemoveSubcontractorUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"site_subcontractors\" where \"site_id\" = $1 and \"subcontractor_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.SiteID}
	for _, rel := range related {
		values = append(values, rel.UserID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSubcontractorUsersFromSitesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SubcontractorUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.SubcontractorUsers)
			if ln > 1 && i < ln-1 {
				o.R.SubcontractorUsers[i] = o.R.SubcontractorUsers[ln-1]
			}
			o.R.SubcontractorUsers = o.R.SubcontractorUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeSubcontractorUsersFromSitesSlice(o *Site, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Sites {
			if o.SiteID != ri.SiteID {
				continue
			}

			ln := len(rel.R.Sites)
			if ln > 1 && i < ln-1 {
				rel.R.Sites[i] = rel.R.Sites[ln-1]
			}
			rel.R.Sites = rel.R.Sites[:ln-1]
			break
		}
	}
}

// AddVendors adds the given related objects to the existing relationships
// of the site, optionally inserting them as new records.
// Appends related to o.R.Vendors.
// Sets related.R.Sites appropriately.
func (o *Site) AddVendors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vendor) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"site_vendors\" (\"site_id\", \"vendor_id\") values ($1, $2)"
		values := []interface{}{o.SiteID, rel.VendorID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &siteR{
			Vendors: related,
		}
	} else {
		o.R.Vendors = append(o.R.Vendors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vendorR{
				Sites: SiteSlice{o},
			}
		} else {
			rel.R.Sites = append(rel.R.Sites, o)
		}
	}
	return nil
}

// SetVendors removes all previously related items of the
// site replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sites's Vendors accordingly.
// Replaces o.R.Vendors with related.
// Sets related.R.Sites's Vendors accordingly.
func (o *Site) SetVendors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vendor) error {
	query := "delete from \"site_vendors\" where \"site_id\" = $1"
	values := []interface{}{o.SiteID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeVendorsFromSitesSlice(o, related)
	if o.R != nil {
		o.R.Vendors = nil
	}

	return o.AddVendors(ctx, exec, insert, related...)
}

// RemoveVendors relationships from objects passed in.
// Removes related items from R.Vendors (uses pointer comparison, removal does not keep order)
// Sets related.R.Sites.
func (o *Site) RemoveVendors(ctx context.Context, exec boil.ContextExecutor, related ...*Vendor) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"site_vendors\" where \"site_id\" = $1 and \"vendor_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.SiteID}
	for _, rel := range related {
		values = append(values, rel.VendorID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeVendorsFromSitesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Vendors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Vendors)
			if ln > 1 && i < ln-1 {
				o.R.Vendors[i] = o.R.Vendors[ln-1]
			}
			o.R.Vendors = o.R.Vendors[:ln-1]
			break
		}
	}

	return nil
}

func removeVendorsFromSitesSlice(o *Site, related []*Vendor) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Sites {
			if o.SiteID != ri.SiteID {
				continue
			}

			ln := len(rel.R.Sites)
			if ln > 1 && i < ln-1 {
				rel.R.Sites[i] = rel.R.Sites[ln-1]
			}
			rel.R.Sites = rel.R.Sites[:ln-1]
			break
		}
	}
}

// Sites retrieves all the records using an executor.
func Sites(mods ...qm.QueryMod) siteQuery {
	mods = append(mods, qm.From("\"sites\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sites\".*"})
	}

	return siteQuery{q}
}

// FindSite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSite(ctx context.Context, exec boil.ContextExecutor, siteID string, selectCols ...string) (*Site, error) {
	siteObj := &Site{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sites\" where \"site_id\"=$1", sel,
	)

	q := queries.Raw(query, siteID)

	err := q.Bind(ctx, exec, siteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sites")
	}

	if err = siteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return siteObj, err
	}

	return siteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Site) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sites provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	siteInsertCacheMut.RLock()
	cache, cached := siteInsertCache[key]
	siteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			siteAllColumns,
			siteColumnsWithDefault,
			siteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(siteType, siteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(siteType, siteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sites\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sites\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sites")
	}

	if !cached {
		siteInsertCacheMut.Lock()
		siteInsertCache[key] = cache
		siteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Site.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Site) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	siteUpdateCacheMut.RLock()
	cache, cached := siteUpdateCache[key]
	siteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			siteAllColumns,
			sitePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sites, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sites\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sitePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(siteType, siteMapping, append(wl, sitePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sites row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sites")
	}

	if !cached {
		siteUpdateCacheMut.Lock()
		siteUpdateCache[key] = cache
		siteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q siteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sites")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SiteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sitePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in site slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all site")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Site) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no sites provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	siteUpsertCacheMut.RLock()
	cache, cached := siteUpsertCache[key]
	siteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			siteAllColumns,
			siteColumnsWithDefault,
			siteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			siteAllColumns,
			sitePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sites, could not build update column list")
		}

		ret := strmangle.SetComplement(siteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sitePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert sites, could not build conflict column list")
			}

			conflict = make([]string, len(sitePrimaryKeyColumns))
			copy(conflict, sitePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sites\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(siteType, siteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(siteType, siteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sites")
	}

	if !cached {
		siteUpsertCacheMut.Lock()
		siteUpsertCache[key] = cache
		siteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Site record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Site) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Site provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sitePrimaryKeyMapping)
	sql := "DELETE FROM \"sites\" WHERE \"site_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sites")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q siteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no siteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sites")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SiteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(siteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sites\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sitePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from site slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sites")
	}

	if len(siteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Site) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSite(ctx, exec, o.SiteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SiteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SiteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sites\".* FROM \"sites\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sitePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SiteSlice")
	}

	*o = slice

	return nil
}

// SiteExists checks if the Site row exists.
func SiteExists(ctx context.Context, exec boil.ContextExecutor, siteID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sites\" where \"site_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, siteID)
	}
	row := exec.QueryRowContext(ctx, sql, siteID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sites exists")
	}

	return exists, nil
}

// Exists checks if the Site row exists.
func (o *Site) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SiteExists(ctx, exec, o.SiteID)
}
