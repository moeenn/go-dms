// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Delivery is an object representing the database table.
type Delivery struct {
	DeliveryID string         `boil:"delivery_id" json:"delivery_id" toml:"delivery_id" yaml:"delivery_id"`
	BookingID  string         `boil:"booking_id" json:"booking_id" toml:"booking_id" yaml:"booking_id"`
	VendorID   string         `boil:"vendor_id" json:"vendor_id" toml:"vendor_id" yaml:"vendor_id"`
	Status     DeliveryStatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	Notes      null.String    `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`

	R *deliveryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryColumns = struct {
	DeliveryID string
	BookingID  string
	VendorID   string
	Status     string
	Notes      string
}{
	DeliveryID: "delivery_id",
	BookingID:  "booking_id",
	VendorID:   "vendor_id",
	Status:     "status",
	Notes:      "notes",
}

var DeliveryTableColumns = struct {
	DeliveryID string
	BookingID  string
	VendorID   string
	Status     string
	Notes      string
}{
	DeliveryID: "delivery.delivery_id",
	BookingID:  "delivery.booking_id",
	VendorID:   "delivery.vendor_id",
	Status:     "delivery.status",
	Notes:      "delivery.notes",
}

// Generated where

type whereHelperDeliveryStatus struct{ field string }

func (w whereHelperDeliveryStatus) EQ(x DeliveryStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperDeliveryStatus) NEQ(x DeliveryStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperDeliveryStatus) LT(x DeliveryStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperDeliveryStatus) LTE(x DeliveryStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperDeliveryStatus) GT(x DeliveryStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperDeliveryStatus) GTE(x DeliveryStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperDeliveryStatus) IN(slice []DeliveryStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperDeliveryStatus) NIN(slice []DeliveryStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeliveryWhere = struct {
	DeliveryID whereHelperstring
	BookingID  whereHelperstring
	VendorID   whereHelperstring
	Status     whereHelperDeliveryStatus
	Notes      whereHelpernull_String
}{
	DeliveryID: whereHelperstring{field: "\"delivery\".\"delivery_id\""},
	BookingID:  whereHelperstring{field: "\"delivery\".\"booking_id\""},
	VendorID:   whereHelperstring{field: "\"delivery\".\"vendor_id\""},
	Status:     whereHelperDeliveryStatus{field: "\"delivery\".\"status\""},
	Notes:      whereHelpernull_String{field: "\"delivery\".\"notes\""},
}

// DeliveryRels is where relationship names are stored.
var DeliveryRels = struct {
	Booking string
	Vendor  string
}{
	Booking: "Booking",
	Vendor:  "Vendor",
}

// deliveryR is where relationships are stored.
type deliveryR struct {
	Booking *Booking `boil:"Booking" json:"Booking" toml:"Booking" yaml:"Booking"`
	Vendor  *Vendor  `boil:"Vendor" json:"Vendor" toml:"Vendor" yaml:"Vendor"`
}

// NewStruct creates a new relationship struct
func (*deliveryR) NewStruct() *deliveryR {
	return &deliveryR{}
}

func (r *deliveryR) GetBooking() *Booking {
	if r == nil {
		return nil
	}
	return r.Booking
}

func (r *deliveryR) GetVendor() *Vendor {
	if r == nil {
		return nil
	}
	return r.Vendor
}

// deliveryL is where Load methods for each relationship are stored.
type deliveryL struct{}

var (
	deliveryAllColumns            = []string{"delivery_id", "booking_id", "vendor_id", "status", "notes"}
	deliveryColumnsWithoutDefault = []string{"booking_id", "vendor_id", "status"}
	deliveryColumnsWithDefault    = []string{"delivery_id", "notes"}
	deliveryPrimaryKeyColumns     = []string{"delivery_id"}
	deliveryGeneratedColumns      = []string{}
)

type (
	// DeliverySlice is an alias for a slice of pointers to Delivery.
	// This should almost always be used instead of []Delivery.
	DeliverySlice []*Delivery
	// DeliveryHook is the signature for custom Delivery hook methods
	DeliveryHook func(context.Context, boil.ContextExecutor, *Delivery) error

	deliveryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryType                 = reflect.TypeOf(&Delivery{})
	deliveryMapping              = queries.MakeStructMapping(deliveryType)
	deliveryPrimaryKeyMapping, _ = queries.BindMapping(deliveryType, deliveryMapping, deliveryPrimaryKeyColumns)
	deliveryInsertCacheMut       sync.RWMutex
	deliveryInsertCache          = make(map[string]insertCache)
	deliveryUpdateCacheMut       sync.RWMutex
	deliveryUpdateCache          = make(map[string]updateCache)
	deliveryUpsertCacheMut       sync.RWMutex
	deliveryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliveryAfterSelectMu sync.Mutex
var deliveryAfterSelectHooks []DeliveryHook

var deliveryBeforeInsertMu sync.Mutex
var deliveryBeforeInsertHooks []DeliveryHook
var deliveryAfterInsertMu sync.Mutex
var deliveryAfterInsertHooks []DeliveryHook

var deliveryBeforeUpdateMu sync.Mutex
var deliveryBeforeUpdateHooks []DeliveryHook
var deliveryAfterUpdateMu sync.Mutex
var deliveryAfterUpdateHooks []DeliveryHook

var deliveryBeforeDeleteMu sync.Mutex
var deliveryBeforeDeleteHooks []DeliveryHook
var deliveryAfterDeleteMu sync.Mutex
var deliveryAfterDeleteHooks []DeliveryHook

var deliveryBeforeUpsertMu sync.Mutex
var deliveryBeforeUpsertHooks []DeliveryHook
var deliveryAfterUpsertMu sync.Mutex
var deliveryAfterUpsertHooks []DeliveryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Delivery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Delivery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Delivery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Delivery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Delivery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Delivery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Delivery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Delivery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Delivery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliveryHook registers your hook function for all future operations.
func AddDeliveryHook(hookPoint boil.HookPoint, deliveryHook DeliveryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliveryAfterSelectMu.Lock()
		deliveryAfterSelectHooks = append(deliveryAfterSelectHooks, deliveryHook)
		deliveryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deliveryBeforeInsertMu.Lock()
		deliveryBeforeInsertHooks = append(deliveryBeforeInsertHooks, deliveryHook)
		deliveryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deliveryAfterInsertMu.Lock()
		deliveryAfterInsertHooks = append(deliveryAfterInsertHooks, deliveryHook)
		deliveryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deliveryBeforeUpdateMu.Lock()
		deliveryBeforeUpdateHooks = append(deliveryBeforeUpdateHooks, deliveryHook)
		deliveryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deliveryAfterUpdateMu.Lock()
		deliveryAfterUpdateHooks = append(deliveryAfterUpdateHooks, deliveryHook)
		deliveryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deliveryBeforeDeleteMu.Lock()
		deliveryBeforeDeleteHooks = append(deliveryBeforeDeleteHooks, deliveryHook)
		deliveryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deliveryAfterDeleteMu.Lock()
		deliveryAfterDeleteHooks = append(deliveryAfterDeleteHooks, deliveryHook)
		deliveryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deliveryBeforeUpsertMu.Lock()
		deliveryBeforeUpsertHooks = append(deliveryBeforeUpsertHooks, deliveryHook)
		deliveryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deliveryAfterUpsertMu.Lock()
		deliveryAfterUpsertHooks = append(deliveryAfterUpsertHooks, deliveryHook)
		deliveryAfterUpsertMu.Unlock()
	}
}

// One returns a single delivery record from the query.
func (q deliveryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Delivery, error) {
	o := &Delivery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for delivery")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Delivery records from the query.
func (q deliveryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliverySlice, error) {
	var o []*Delivery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Delivery slice")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Delivery records in the query.
func (q deliveryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count delivery rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliveryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if delivery exists")
	}

	return count > 0, nil
}

// Booking pointed to by the foreign key.
func (o *Delivery) Booking(mods ...qm.QueryMod) bookingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"booking_id\" = ?", o.BookingID),
	}

	queryMods = append(queryMods, mods...)

	return Bookings(queryMods...)
}

// Vendor pointed to by the foreign key.
func (o *Delivery) Vendor(mods ...qm.QueryMod) vendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vendor_id\" = ?", o.VendorID),
	}

	queryMods = append(queryMods, mods...)

	return Vendors(queryMods...)
}

// LoadBooking allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadBooking(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		args[object.BookingID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			args[obj.BookingID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`bookings`),
		qm.WhereIn(`bookings.booking_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Booking")
	}

	var resultSlice []*Booking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Booking")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bookings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookings")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Booking = foreign
		if foreign.R == nil {
			foreign.R = &bookingR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookingID == foreign.BookingID {
				local.R.Booking = foreign
				if foreign.R == nil {
					foreign.R = &bookingR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		args[object.VendorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			args[obj.VendorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vendors`),
		qm.WhereIn(`vendors.vendor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vendor")
	}

	var resultSlice []*Vendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vendors")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vendor = foreign
		if foreign.R == nil {
			foreign.R = &vendorR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VendorID == foreign.VendorID {
				local.R.Vendor = foreign
				if foreign.R == nil {
					foreign.R = &vendorR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// SetBooking of the delivery to the related item.
// Sets o.R.Booking to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetBooking(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Booking) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"delivery\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"booking_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.BookingID, o.DeliveryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookingID = related.BookingID
	if o.R == nil {
		o.R = &deliveryR{
			Booking: related,
		}
	} else {
		o.R.Booking = related
	}

	if related.R == nil {
		related.R = &bookingR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// SetVendor of the delivery to the related item.
// Sets o.R.Vendor to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"delivery\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.VendorID, o.DeliveryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VendorID = related.VendorID
	if o.R == nil {
		o.R = &deliveryR{
			Vendor: related,
		}
	} else {
		o.R.Vendor = related
	}

	if related.R == nil {
		related.R = &vendorR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// Deliveries retrieves all the records using an executor.
func Deliveries(mods ...qm.QueryMod) deliveryQuery {
	mods = append(mods, qm.From("\"delivery\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"delivery\".*"})
	}

	return deliveryQuery{q}
}

// FindDelivery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelivery(ctx context.Context, exec boil.ContextExecutor, deliveryID string, selectCols ...string) (*Delivery, error) {
	deliveryObj := &Delivery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delivery\" where \"delivery_id\"=$1", sel,
	)

	q := queries.Raw(query, deliveryID)

	err := q.Bind(ctx, exec, deliveryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from delivery")
	}

	if err = deliveryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliveryObj, err
	}

	return deliveryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Delivery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delivery provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryInsertCacheMut.RLock()
	cache, cached := deliveryInsertCache[key]
	deliveryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delivery\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delivery\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into delivery")
	}

	if !cached {
		deliveryInsertCacheMut.Lock()
		deliveryInsertCache[key] = cache
		deliveryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Delivery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Delivery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliveryUpdateCacheMut.RLock()
	cache, cached := deliveryUpdateCache[key]
	deliveryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update delivery, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delivery\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, append(wl, deliveryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update delivery row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for delivery")
	}

	if !cached {
		deliveryUpdateCacheMut.Lock()
		deliveryUpdateCache[key] = cache
		deliveryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for delivery")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliverySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delivery\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all delivery")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Delivery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no delivery provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryUpsertCacheMut.RLock()
	cache, cached := deliveryUpsertCache[key]
	deliveryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert delivery, could not build update column list")
		}

		ret := strmangle.SetComplement(deliveryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deliveryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert delivery, could not build conflict column list")
			}

			conflict = make([]string, len(deliveryPrimaryKeyColumns))
			copy(conflict, deliveryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delivery\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert delivery")
	}

	if !cached {
		deliveryUpsertCacheMut.Lock()
		deliveryUpsertCache[key] = cache
		deliveryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Delivery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Delivery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Delivery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryPrimaryKeyMapping)
	sql := "DELETE FROM \"delivery\" WHERE \"delivery_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for delivery")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliveryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deliveryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliverySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliveryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delivery\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery")
	}

	if len(deliveryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Delivery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelivery(ctx, exec, o.DeliveryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliverySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliverySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delivery\".* FROM \"delivery\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeliverySlice")
	}

	*o = slice

	return nil
}

// DeliveryExists checks if the Delivery row exists.
func DeliveryExists(ctx context.Context, exec boil.ContextExecutor, deliveryID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delivery\" where \"delivery_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deliveryID)
	}
	row := exec.QueryRowContext(ctx, sql, deliveryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if delivery exists")
	}

	return exists, nil
}

// Exists checks if the Delivery row exists.
func (o *Delivery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliveryExists(ctx, exec, o.DeliveryID)
}
