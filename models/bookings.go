// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Booking is an object representing the database table.
type Booking struct {
	BookingID      string    `boil:"booking_id" json:"booking_id" toml:"booking_id" yaml:"booking_id"`
	SiteID         string    `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	StartTimestamp time.Time `boil:"start_timestamp" json:"start_timestamp" toml:"start_timestamp" yaml:"start_timestamp"`
	EndTimestamp   time.Time `boil:"end_timestamp" json:"end_timestamp" toml:"end_timestamp" yaml:"end_timestamp"`
	Duration       string    `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	CreatedAt      null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *bookingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookingColumns = struct {
	BookingID      string
	SiteID         string
	StartTimestamp string
	EndTimestamp   string
	Duration       string
	CreatedAt      string
	DeletedAt      string
}{
	BookingID:      "booking_id",
	SiteID:         "site_id",
	StartTimestamp: "start_timestamp",
	EndTimestamp:   "end_timestamp",
	Duration:       "duration",
	CreatedAt:      "created_at",
	DeletedAt:      "deleted_at",
}

var BookingTableColumns = struct {
	BookingID      string
	SiteID         string
	StartTimestamp string
	EndTimestamp   string
	Duration       string
	CreatedAt      string
	DeletedAt      string
}{
	BookingID:      "bookings.booking_id",
	SiteID:         "bookings.site_id",
	StartTimestamp: "bookings.start_timestamp",
	EndTimestamp:   "bookings.end_timestamp",
	Duration:       "bookings.duration",
	CreatedAt:      "bookings.created_at",
	DeletedAt:      "bookings.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BookingWhere = struct {
	BookingID      whereHelperstring
	SiteID         whereHelperstring
	StartTimestamp whereHelpertime_Time
	EndTimestamp   whereHelpertime_Time
	Duration       whereHelperstring
	CreatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
}{
	BookingID:      whereHelperstring{field: "\"bookings\".\"booking_id\""},
	SiteID:         whereHelperstring{field: "\"bookings\".\"site_id\""},
	StartTimestamp: whereHelpertime_Time{field: "\"bookings\".\"start_timestamp\""},
	EndTimestamp:   whereHelpertime_Time{field: "\"bookings\".\"end_timestamp\""},
	Duration:       whereHelperstring{field: "\"bookings\".\"duration\""},
	CreatedAt:      whereHelpernull_Time{field: "\"bookings\".\"created_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"bookings\".\"deleted_at\""},
}

// BookingRels is where relationship names are stored.
var BookingRels = struct {
	Site          string
	SiteResources string
	Deliveries    string
}{
	Site:          "Site",
	SiteResources: "SiteResources",
	Deliveries:    "Deliveries",
}

// bookingR is where relationships are stored.
type bookingR struct {
	Site          *Site             `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
	SiteResources SiteResourceSlice `boil:"SiteResources" json:"SiteResources" toml:"SiteResources" yaml:"SiteResources"`
	Deliveries    DeliverySlice     `boil:"Deliveries" json:"Deliveries" toml:"Deliveries" yaml:"Deliveries"`
}

// NewStruct creates a new relationship struct
func (*bookingR) NewStruct() *bookingR {
	return &bookingR{}
}

func (r *bookingR) GetSite() *Site {
	if r == nil {
		return nil
	}
	return r.Site
}

func (r *bookingR) GetSiteResources() SiteResourceSlice {
	if r == nil {
		return nil
	}
	return r.SiteResources
}

func (r *bookingR) GetDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}
	return r.Deliveries
}

// bookingL is where Load methods for each relationship are stored.
type bookingL struct{}

var (
	bookingAllColumns            = []string{"booking_id", "site_id", "start_timestamp", "end_timestamp", "duration", "created_at", "deleted_at"}
	bookingColumnsWithoutDefault = []string{"site_id", "start_timestamp", "end_timestamp", "duration"}
	bookingColumnsWithDefault    = []string{"booking_id", "created_at", "deleted_at"}
	bookingPrimaryKeyColumns     = []string{"booking_id"}
	bookingGeneratedColumns      = []string{}
)

type (
	// BookingSlice is an alias for a slice of pointers to Booking.
	// This should almost always be used instead of []Booking.
	BookingSlice []*Booking
	// BookingHook is the signature for custom Booking hook methods
	BookingHook func(context.Context, boil.ContextExecutor, *Booking) error

	bookingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookingType                 = reflect.TypeOf(&Booking{})
	bookingMapping              = queries.MakeStructMapping(bookingType)
	bookingPrimaryKeyMapping, _ = queries.BindMapping(bookingType, bookingMapping, bookingPrimaryKeyColumns)
	bookingInsertCacheMut       sync.RWMutex
	bookingInsertCache          = make(map[string]insertCache)
	bookingUpdateCacheMut       sync.RWMutex
	bookingUpdateCache          = make(map[string]updateCache)
	bookingUpsertCacheMut       sync.RWMutex
	bookingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookingAfterSelectMu sync.Mutex
var bookingAfterSelectHooks []BookingHook

var bookingBeforeInsertMu sync.Mutex
var bookingBeforeInsertHooks []BookingHook
var bookingAfterInsertMu sync.Mutex
var bookingAfterInsertHooks []BookingHook

var bookingBeforeUpdateMu sync.Mutex
var bookingBeforeUpdateHooks []BookingHook
var bookingAfterUpdateMu sync.Mutex
var bookingAfterUpdateHooks []BookingHook

var bookingBeforeDeleteMu sync.Mutex
var bookingBeforeDeleteHooks []BookingHook
var bookingAfterDeleteMu sync.Mutex
var bookingAfterDeleteHooks []BookingHook

var bookingBeforeUpsertMu sync.Mutex
var bookingBeforeUpsertHooks []BookingHook
var bookingAfterUpsertMu sync.Mutex
var bookingAfterUpsertHooks []BookingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Booking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Booking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Booking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Booking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Booking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Booking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Booking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Booking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Booking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookingHook registers your hook function for all future operations.
func AddBookingHook(hookPoint boil.HookPoint, bookingHook BookingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookingAfterSelectMu.Lock()
		bookingAfterSelectHooks = append(bookingAfterSelectHooks, bookingHook)
		bookingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bookingBeforeInsertMu.Lock()
		bookingBeforeInsertHooks = append(bookingBeforeInsertHooks, bookingHook)
		bookingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bookingAfterInsertMu.Lock()
		bookingAfterInsertHooks = append(bookingAfterInsertHooks, bookingHook)
		bookingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bookingBeforeUpdateMu.Lock()
		bookingBeforeUpdateHooks = append(bookingBeforeUpdateHooks, bookingHook)
		bookingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bookingAfterUpdateMu.Lock()
		bookingAfterUpdateHooks = append(bookingAfterUpdateHooks, bookingHook)
		bookingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bookingBeforeDeleteMu.Lock()
		bookingBeforeDeleteHooks = append(bookingBeforeDeleteHooks, bookingHook)
		bookingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bookingAfterDeleteMu.Lock()
		bookingAfterDeleteHooks = append(bookingAfterDeleteHooks, bookingHook)
		bookingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bookingBeforeUpsertMu.Lock()
		bookingBeforeUpsertHooks = append(bookingBeforeUpsertHooks, bookingHook)
		bookingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bookingAfterUpsertMu.Lock()
		bookingAfterUpsertHooks = append(bookingAfterUpsertHooks, bookingHook)
		bookingAfterUpsertMu.Unlock()
	}
}

// One returns a single booking record from the query.
func (q bookingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Booking, error) {
	o := &Booking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bookings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Booking records from the query.
func (q bookingQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookingSlice, error) {
	var o []*Booking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Booking slice")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Booking records in the query.
func (q bookingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bookings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bookings exists")
	}

	return count > 0, nil
}

// Site pointed to by the foreign key.
func (o *Booking) Site(mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"site_id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return Sites(queryMods...)
}

// SiteResources retrieves all the site_resource's SiteResources with an executor.
func (o *Booking) SiteResources(mods ...qm.QueryMod) siteResourceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"booking_resources\" on \"site_resources\".\"site_resource_id\" = \"booking_resources\".\"site_resource_id\""),
		qm.Where("\"booking_resources\".\"booking_id\"=?", o.BookingID),
	)

	return SiteResources(queryMods...)
}

// Deliveries retrieves all the delivery's Deliveries with an executor.
func (o *Booking) Deliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"delivery\".\"booking_id\"=?", o.BookingID),
	)

	return Deliveries(queryMods...)
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookingL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooking interface{}, mods queries.Applicator) error {
	var slice []*Booking
	var object *Booking

	if singular {
		var ok bool
		object, ok = maybeBooking.(*Booking)
		if !ok {
			object = new(Booking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBooking))
			}
		}
	} else {
		s, ok := maybeBooking.(*[]*Booking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingR{}
		}
		args[object.SiteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingR{}
			}

			args[obj.SiteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sites`),
		qm.WhereIn(`sites.site_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sites")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &siteR{}
		}
		foreign.R.Bookings = append(foreign.R.Bookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.SiteID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.Bookings = append(foreign.R.Bookings, local)
				break
			}
		}
	}

	return nil
}

// LoadSiteResources allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookingL) LoadSiteResources(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooking interface{}, mods queries.Applicator) error {
	var slice []*Booking
	var object *Booking

	if singular {
		var ok bool
		object, ok = maybeBooking.(*Booking)
		if !ok {
			object = new(Booking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBooking))
			}
		}
	} else {
		s, ok := maybeBooking.(*[]*Booking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingR{}
		}
		args[object.BookingID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingR{}
			}
			args[obj.BookingID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"site_resources\".\"site_resource_id\", \"site_resources\".\"site_id\", \"site_resources\".\"name\", \"site_resources\".\"resource_type\", \"site_resources\".\"created_at\", \"site_resources\".\"deleted_at\", \"a\".\"booking_id\""),
		qm.From("\"site_resources\""),
		qm.InnerJoin("\"booking_resources\" as \"a\" on \"site_resources\".\"site_resource_id\" = \"a\".\"site_resource_id\""),
		qm.WhereIn("\"a\".\"booking_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load site_resources")
	}

	var resultSlice []*SiteResource

	var localJoinCols []string
	for results.Next() {
		one := new(SiteResource)
		var localJoinCol string

		err = results.Scan(&one.SiteResourceID, &one.SiteID, &one.Name, &one.ResourceType, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for site_resources")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice site_resources")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on site_resources")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site_resources")
	}

	if len(siteResourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SiteResources = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &siteResourceR{}
			}
			foreign.R.Bookings = append(foreign.R.Bookings, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.BookingID == localJoinCol {
				local.R.SiteResources = append(local.R.SiteResources, foreign)
				if foreign.R == nil {
					foreign.R = &siteResourceR{}
				}
				foreign.R.Bookings = append(foreign.R.Bookings, local)
				break
			}
		}
	}

	return nil
}

// LoadDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookingL) LoadDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooking interface{}, mods queries.Applicator) error {
	var slice []*Booking
	var object *Booking

	if singular {
		var ok bool
		object, ok = maybeBooking.(*Booking)
		if !ok {
			object = new(Booking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBooking))
			}
		}
	} else {
		s, ok := maybeBooking.(*[]*Booking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingR{}
		}
		args[object.BookingID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingR{}
			}
			args[obj.BookingID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`delivery`),
		qm.WhereIn(`delivery.booking_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.Booking = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BookingID == foreign.BookingID {
				local.R.Deliveries = append(local.R.Deliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.Booking = local
				break
			}
		}
	}

	return nil
}

// SetSite of the booking to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.Bookings.
func (o *Booking) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bookings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookingPrimaryKeyColumns),
	)
	values := []interface{}{related.SiteID, o.BookingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.SiteID
	if o.R == nil {
		o.R = &bookingR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			Bookings: BookingSlice{o},
		}
	} else {
		related.R.Bookings = append(related.R.Bookings, o)
	}

	return nil
}

// AddSiteResources adds the given related objects to the existing relationships
// of the booking, optionally inserting them as new records.
// Appends related to o.R.SiteResources.
// Sets related.R.Bookings appropriately.
func (o *Booking) AddSiteResources(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteResource) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"booking_resources\" (\"booking_id\", \"site_resource_id\") values ($1, $2)"
		values := []interface{}{o.BookingID, rel.SiteResourceID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &bookingR{
			SiteResources: related,
		}
	} else {
		o.R.SiteResources = append(o.R.SiteResources, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &siteResourceR{
				Bookings: BookingSlice{o},
			}
		} else {
			rel.R.Bookings = append(rel.R.Bookings, o)
		}
	}
	return nil
}

// SetSiteResources removes all previously related items of the
// booking replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Bookings's SiteResources accordingly.
// Replaces o.R.SiteResources with related.
// Sets related.R.Bookings's SiteResources accordingly.
func (o *Booking) SetSiteResources(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteResource) error {
	query := "delete from \"booking_resources\" where \"booking_id\" = $1"
	values := []interface{}{o.BookingID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSiteResourcesFromBookingsSlice(o, related)
	if o.R != nil {
		o.R.SiteResources = nil
	}

	return o.AddSiteResources(ctx, exec, insert, related...)
}

// RemoveSiteResources relationships from objects passed in.
// Removes related items from R.SiteResources (uses pointer comparison, removal does not keep order)
// Sets related.R.Bookings.
func (o *Booking) RemoveSiteResources(ctx context.Context, exec boil.ContextExecutor, related ...*SiteResource) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"booking_resources\" where \"booking_id\" = $1 and \"site_resource_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.BookingID}
	for _, rel := range related {
		values = append(values, rel.SiteResourceID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSiteResourcesFromBookingsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SiteResources {
			if rel != ri {
				continue
			}

			ln := len(o.R.SiteResources)
			if ln > 1 && i < ln-1 {
				o.R.SiteResources[i] = o.R.SiteResources[ln-1]
			}
			o.R.SiteResources = o.R.SiteResources[:ln-1]
			break
		}
	}

	return nil
}

func removeSiteResourcesFromBookingsSlice(o *Booking, related []*SiteResource) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Bookings {
			if o.BookingID != ri.BookingID {
				continue
			}

			ln := len(rel.R.Bookings)
			if ln > 1 && i < ln-1 {
				rel.R.Bookings[i] = rel.R.Bookings[ln-1]
			}
			rel.R.Bookings = rel.R.Bookings[:ln-1]
			break
		}
	}
}

// AddDeliveries adds the given related objects to the existing relationships
// of the booking, optionally inserting them as new records.
// Appends related to o.R.Deliveries.
// Sets related.R.Booking appropriately.
func (o *Booking) AddDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BookingID = o.BookingID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"delivery\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"booking_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.BookingID, rel.DeliveryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BookingID = o.BookingID
		}
	}

	if o.R == nil {
		o.R = &bookingR{
			Deliveries: related,
		}
	} else {
		o.R.Deliveries = append(o.R.Deliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				Booking: o,
			}
		} else {
			rel.R.Booking = o
		}
	}
	return nil
}

// Bookings retrieves all the records using an executor.
func Bookings(mods ...qm.QueryMod) bookingQuery {
	mods = append(mods, qm.From("\"bookings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bookings\".*"})
	}

	return bookingQuery{q}
}

// FindBooking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooking(ctx context.Context, exec boil.ContextExecutor, bookingID string, selectCols ...string) (*Booking, error) {
	bookingObj := &Booking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bookings\" where \"booking_id\"=$1", sel,
	)

	q := queries.Raw(query, bookingID)

	err := q.Bind(ctx, exec, bookingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bookings")
	}

	if err = bookingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookingObj, err
	}

	return bookingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Booking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bookings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookingInsertCacheMut.RLock()
	cache, cached := bookingInsertCache[key]
	bookingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bookings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bookings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bookings")
	}

	if !cached {
		bookingInsertCacheMut.Lock()
		bookingInsertCache[key] = cache
		bookingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Booking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Booking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookingUpdateCacheMut.RLock()
	cache, cached := bookingUpdateCache[key]
	bookingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bookings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bookings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, append(wl, bookingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bookings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bookings")
	}

	if !cached {
		bookingUpdateCacheMut.Lock()
		bookingUpdateCache[key] = cache
		bookingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bookings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bookings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booking")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Booking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no bookings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookingUpsertCacheMut.RLock()
	cache, cached := bookingUpsertCache[key]
	bookingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bookings, could not build update column list")
		}

		ret := strmangle.SetComplement(bookingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bookingPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert bookings, could not build conflict column list")
			}

			conflict = make([]string, len(bookingPrimaryKeyColumns))
			copy(conflict, bookingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bookings\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bookings")
	}

	if !cached {
		bookingUpsertCacheMut.Lock()
		bookingUpsertCache[key] = cache
		bookingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Booking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Booking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Booking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookingPrimaryKeyMapping)
	sql := "DELETE FROM \"bookings\" WHERE \"booking_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bookings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bookings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bookings")
	}

	if len(bookingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Booking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooking(ctx, exec, o.BookingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bookings\".* FROM \"bookings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookingSlice")
	}

	*o = slice

	return nil
}

// BookingExists checks if the Booking row exists.
func BookingExists(ctx context.Context, exec boil.ContextExecutor, bookingID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bookings\" where \"booking_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bookingID)
	}
	row := exec.QueryRowContext(ctx, sql, bookingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bookings exists")
	}

	return exists, nil
}

// Exists checks if the Booking row exists.
func (o *Booking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookingExists(ctx, exec, o.BookingID)
}
